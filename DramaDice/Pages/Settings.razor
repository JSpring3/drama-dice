@page "/settings"
@inject HttpClient _http
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorageSync
@inject IToastService _toastService


<PageTitle>Drama Dice | Discord Server Info</PageTitle>

<div class="settings-box">
    <h2>Discord Info</h2>
            <div class="stepper-input">
            <MudRadioGroup @bind-SelectedOption="@MsgType">
                <MudRadio Option="@("Simple")" Color="Color.Primary" Dense="true">Simple</MudRadio>
                <MudRadio Option="@("Detailed")" Color="Color.Secondary" Dense="true">Detailed</MudRadio>
            </MudRadioGroup>
        </div>
    <div>
        <div class="input-box">
            <input type="text" name="web-hook-url" id="web-hook-url" @bind-value="WebHookUrl">
            <label>WebHook Url</label>
        </div>
        <div class="action-buttons">
            <button class="btn-default" role="button" @onclick="Save">
                 Save Settings
            </button >
        </div>
    </div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        var webHookUrl = await _localStorage.GetItemAsync<string>(LocalStorage.WEBHOOK);
        var msgType = await _localStorage.GetItemAsync<string>(LocalStorage.MSG_TYPE);

        if (!string.IsNullOrWhiteSpace(webHookUrl))
        {
            WebHookUrl = webHookUrl;
        }
        else
        {
            _toastService.ShowInfo(WebHookInfoToast.MESSAGE,WebHookInfoToast.TITLE);
            await _localStorage.SetItemAsync(LocalStorage.MSG_TYPE, "Simple");
        }

    }

    private void Save()
    {
        if (!WebHookUrl.StartsWith(Validation.URL_CHECK_VALUE_DISCORD) && !WebHookUrl.StartsWith(Validation.URL_CHECK_VALUE_GUILDED))
        {
            _toastService.ShowError(WebHookErrorToast.MESSAGE,WebHookErrorToast.TITLE );

            return;
        }
        if (string.IsNullOrWhiteSpace(WebHookUrl))
        {
            _toastService.ShowInfo(WebHookInfoToast.MESSAGE,WebHookInfoToast.TITLE);
        }
        else
        {
            _toastService.ShowSuccess(WebHookSaveToast.MESSAGE,WebHookSaveToast.TITLE);
        }

        _localStorageSync.SetItem(LocalStorage.WEBHOOK, WebHookUrl);
        _localStorageSync.SetItem(LocalStorage.MSG_TYPE, MsgType);

    }

    private string WebHookUrl { get; set; } = string.Empty;

    private string MsgType { get; set; } = "Simple";

}
